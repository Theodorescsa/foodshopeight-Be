from django.db import models
from django.core.validators import MinValueValidator
from django.utils import timezone
from app_home.models import Unit, IngredientCategory

class Supplier(models.Model):
    name = models.CharField("T√™n nh√† cung c·∫•p", max_length=255, unique=True)  # "C√¥ng ty Th·ªãt S·∫°ch ABC"
    contact_name = models.CharField("Ng∆∞·ªùi li√™n h·ªá", max_length=255, blank=True, default="")
    phone = models.CharField("S·ªë ƒëi·ªán tho·∫°i", max_length=50, blank=True, default="")
    email = models.EmailField("Email", blank=True, default="")
    address = models.CharField("ƒê·ªãa ch·ªâ", max_length=255, blank=True, default="")
    note = models.TextField("Ghi ch√∫", blank=True, default="")

    class Meta:
        verbose_name = "Nh√† cung c·∫•p"
        verbose_name_plural = "Nh√† cung c·∫•p"

    def __str__(self):
        return self.name


class Ingredient(models.Model):
    """
    Nguy√™n li·ªáu master (v√≠ d·ª•: Th·ªãt b√≤, G·∫°o t·∫ª, Rau xanh, N∆∞·ªõc m·∫Øm, C√† ph√™).
    current_stock s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ c√°c l√¥ (InventoryLot) ho·∫∑c c√≥ th·ªÉ l∆∞u cached.
    """
    name = models.CharField("T√™n nguy√™n li·ªáu", max_length=255, unique=True)
    category = models.ForeignKey(
        IngredientCategory,
        on_delete=models.PROTECT,
        related_name="ingredients",
        verbose_name="Danh m·ª•c"
    )
    unit = models.ForeignKey(
        Unit,
        on_delete=models.PROTECT,
        related_name="ingredients",
        verbose_name="ƒê∆°n v·ªã t√≠nh"
    )
    min_stock = models.DecimalField("T·ªìn t·ªëi thi·ªÉu", max_digits=12, decimal_places=3, default=0,
                                    validators=[MinValueValidator(0)])
    max_stock = models.DecimalField("T·ªìn t·ªëi ƒëa", max_digits=12, decimal_places=3, default=0,
                                    validators=[MinValueValidator(0)])
    # Gi√° tham chi·∫øu (kh√¥ng b·∫Øt bu·ªôc). Gi√° th·ª±c t·∫ø theo t·ª´ng l√¥.
    reference_unit_price = models.DecimalField("Gi√° tham chi·∫øu/ƒë∆°n v·ªã", max_digits=14, decimal_places=2,
                                               null=True, blank=True)
    is_active = models.BooleanField("ƒêang s·ª≠ d·ª•ng", default=True)

    class Status(models.TextChoices):
        IN_STOCK = "in_stock", "ƒê·ªß h√†ng"
        LOW_STOCK = "low_stock", "G·∫ßn h·∫øt"
        OUT_OF_STOCK = "out_of_stock", "H·∫øt h√†ng"

    status = models.CharField("T√¨nh tr·∫°ng", max_length=20, choices=Status.choices, default=Status.IN_STOCK)
    last_updated = models.DateField("C·∫≠p nh·∫≠t l·∫ßn cu·ªëi", default=timezone.now)

    class Meta:
        verbose_name = "Nguy√™n li·ªáu"
        verbose_name_plural = "Nguy√™n li·ªáu"

    def __str__(self):
        return self.name

    @property
    def current_stock(self):
        # T·ªïng t·ªìn = t·ªïng (quantity_remaining) c·ªßa c√°c l√¥
        agg = self.lots.aggregate(total=models.Sum("quantity_remaining"))
        return agg["total"] or 0


class InventoryLot(models.Model):
    """
    L√¥ nh·∫≠p ‚Äì ƒë·ªÉ qu·∫£n l√Ω h·∫°n d√πng & gi√° theo l√¥ (ph√π h·ª£p m·∫´u c√≥ expiryDate).
    N·∫øu b·∫°n mu·ªën ƒë∆°n gi·∫£n, c√≥ th·ªÉ b·ªè Lot v√† gi·ªØ s·ªë l∆∞·ª£ng ngay tr√™n Ingredient.
    """
    ingredient = models.ForeignKey(
        Ingredient, on_delete=models.CASCADE, related_name="lots", verbose_name="Nguy√™n li·ªáu"
    )
    supplier = models.ForeignKey(
        Supplier, on_delete=models.SET_NULL, null=True, blank=True, related_name="lots", verbose_name="Nh√† cung c·∫•p"
    )
    quantity_received = models.DecimalField("S·ªë l∆∞·ª£ng nh·∫≠p", max_digits=12, decimal_places=3,
                                            validators=[MinValueValidator(0)])
    quantity_remaining = models.DecimalField(
        "S·ªë l∆∞·ª£ng c√≤n l·∫°i",
        max_digits=12,
        decimal_places=3,
        validators=[MinValueValidator(0)],
        null=True, blank=True   # üëà th√™m v√†o
    )
    unit_price = models.DecimalField("ƒê∆°n gi√°", max_digits=14, decimal_places=2)  # gi√°/ƒë∆°n v·ªã
    received_date = models.DateField("Ng√†y nh·∫≠p", default=timezone.now)
    expiry_date = models.DateField("H·∫°n d√πng", null=True, blank=True)

    class Meta:
        indexes = [
            models.Index(fields=["expiry_date"]),
            models.Index(fields=["received_date"]),
        ]
        verbose_name = "L√¥ nh·∫≠p kho"
        verbose_name_plural = "L√¥ nh·∫≠p kho"

    def __str__(self):
        return f"{self.ingredient.name} - {self.received_date} ({self.quantity_remaining}/{self.quantity_received})"

    def save(self, *args, **kwargs):
        # N·∫øu l√† b·∫£n ghi m·ªõi v√† ch∆∞a nh·∫≠p remaining, g√°n b·∫±ng received
        if self._state.adding and not self.quantity_remaining:
            self.quantity_remaining = self.quantity_received
        super().save(*args, **kwargs)
